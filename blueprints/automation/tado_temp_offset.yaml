blueprint:
  name: Tado temperature offset
  description: |
    Ensure the Tado smart valve has the temperature of a separate sensor. The action is only performed if the heating rate is under a set threshold.
    Trigger can be by sensor or by time pattern.
    Optional binary sensor for daytime. At night, the calibration will only fire every two hours.
    
    Change Log:
    - Version 2.01:
      - Added support for outdoor temperature sensor for dynamic threshold adjustment.
      - Implemented adaptive learning to adjust offset based on outdoor temperature.
      - Enhanced automation robustness by adding check for already running automation to avoid errors on Home Assistant restart.

    Inspired by https://gist.github.com/sanderma/1e9163c690e23bc8d32a8c9e9d89a910
  domain: automation
  input:
    source_temp_sensor:
      name: Source Temperature sensor
      description: This sensor will be used as the source.
      selector:
        entity:
          domain: sensor
          device_class: temperature
          multiple: false

    target_tado:
      name: Tado
      description: The Tado to set the offset on.
      selector:
        entity:
          domain: climate
          integration: tado
          multiple: false

    heating_threshold:
      name: Heating Threshold
      description: Heating percentage has to be below this value to start working
      default: 25
      selector:
        number:
          min: 0
          max: 100
          step: 5
          mode: slider

    trigger_sensor:
      name: Temperature trigger
      description: Temperature change triggers automation if set to true, otherwise a time pattern is used
      default: false
      selector:
        boolean:

    night_switch:
      name: "Nighttime (optional)"
      description: "At nighttime the sync rate is reduced to every 2 hours"
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean

    outdoor_temp_sensor:
      name: Outdoor Temperature Sensor
      description: Sensor providing outdoor temperature data for dynamic threshold adjustment.
      selector:
        entity:
          domain: sensor
          device_class: temperature
          multiple: false

  source_url: https://github.com/Crash-Evans/homeassistant/blob/main/blueprints/automation/tado_temp_offset.yaml

variables:
  target_tado: !input "target_tado"
  source_temp_sensor: !input "source_temp_sensor"
  heating_threshold: !input "heating_threshold"
  night_switch: !input "night_switch"
  trigger_sensor: !input "trigger_sensor"
  outdoor_temp_sensor: !input "outdoor_temp_sensor"

trigger:
  - platform: homeassistant
    event: start

condition:
  # Check if the automation is already running to avoid errors
  - condition: not
    conditions:
      - condition: state
        entity_id: automation.tado_temperature_offset
        state: 'on'

  - condition: and
    conditions:
      - not:
          condition: state
          entity_id: !input target_tado
          state: "off"
      - condition: template
        value_template: "{{ trigger.event.data.entity_id == source_temp_sensor or trigger.event.data.entity_id == target_tado }}"
      - condition: template
        value_template: "{{ offset != 0 and actual_temp != 0 and heating_rate | int <= heating_threshold }}"
      - condition: or
        conditions:
          - condition: template
            value_template: '{{ run_flag and trigger_sensor == false }}'
          - condition: template
            value_template: '{{ (run_flag and trigger.event.data.new_state.entity_id == "day") or trigger.event.data.new_state.entity_id == "night" }}'
          - condition: template
            value_template: '{{ trigger_sensor == true }}'

action:
  - service: system_log.write
    data:
      message: "{{ target_tado }} has a temperature difference of {{ offset }}. Setting offset to {{ calculated_offset }}"
      level: info
      logger: blueprints.tado.offset
  - service: system_log.write
    data:
      message: >
        target: {{ target_tado }}
        source: {{ source_temp_sensor }}
        temperature_difference: {{ offset }}
        actual_temperature: {{ actual_temp }}
        tado_temperature: {{ tado_temp }}
        current_offset: {{ current_offset }}
        calculated_offset: {{ calculated_offset }}
        heating_rate: {{ heating_rate }}
        heating_threshold: {{ heating_threshold }}
      level: debug
      logger: blueprints.tado.offset
  - service: tado.set_climate_temperature_offset
    data:
      offset: "{{ calculated_offset }}"
      entity_id: "{{ target_tado }}"
